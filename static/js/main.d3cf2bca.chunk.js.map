{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","ip","setIp","query","setQuery","search","setSearch","useEffect","getIp","a","fetch","then","response","json","jsonData","console","log","Array","isArray","catch","error","className","onSubmit","e","preventDefault","type","value","onChange","target","version","city","asn","continent_code","country","country_area","country_calling_code","country_capital","country_code_iso3","country_name","country_population","currency","currency_name","languages","region","region_code","timezone","utc_offset","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAAe,I,YCgFAA,EA1EL,WACR,MAAmBC,mBAAS,IAA5B,mBAAOC,EAAP,KAAWC,EAAX,KACA,EAA0BF,mBAAS,WAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACRC,MAEC,CAACL,IACJ,IAAMK,EAAK,uCAAE,sBAAAC,EAAA,sEACYC,MAAM,oBAAD,OAAqBP,EAArB,WAC3BQ,MAAK,SAASC,GACbA,EAASC,OAAOF,MAAK,SAAAG,GACnBC,QAAQC,IAAIF,GACZZ,EAAMY,GAENC,QAAQC,IAAIC,MAAMC,QAAQJ,UAK7BK,OAAM,SAASC,GACdL,QAAQC,IAAII,MAbH,yDAAF,qDA2BX,OACE,sBAAKC,UAAU,YAAf,UACG,uBAAMC,SARO,SAACC,GACjBA,EAAEC,iBACFpB,EAASC,GACTC,EAAU,KAKoBe,UAAU,cAArC,UACE,uBAAOA,UAAY,cACnBI,KAAM,OACNC,MAASrB,EACTsB,SAhBc,SAACJ,GACnBjB,EAAUiB,EAAEK,OAAOF,UAiBf,wBAAQL,UAAW,gBAAgBI,KAAO,SAA1C,yBAIN,oCAAOxB,EAAGA,GAAV,OACA,oCAAOA,EAAG4B,QAAV,OACA,qCAAQ5B,EAAG6B,KAAX,OACA,oCAAO7B,EAAG8B,OACV,oCAAO9B,EAAG+B,eAAV,OACA,oCAAO/B,EAAGgC,QAAV,OACA,oCAAOhC,EAAGiC,gBACV,oCAAOjC,EAAGkC,wBACV,oCAAOlC,EAAGmC,mBACV,oCAAOnC,EAAGoC,qBACV,oCAAOpC,EAAGqC,gBAEV,oCAAOrC,EAAGsC,sBACV,oCAAOtC,EAAGuC,YACV,oCAAOvC,EAAGwC,iBACV,oCAAOxC,EAAGyC,aACV,oCAAOzC,EAAG0C,UACV,oCAAO1C,EAAG2C,eACV,oCAAO3C,EAAG4C,YACV,oCAAO5C,EAAG6C,kBC7DEC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d3cf2bca.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport React, {useEffect, useState} from 'react'; \nimport './App.css';\n\n\n\nconst App=()=>{\n  const [ip, setIp]= useState([]); \n  const [query, setQuery] = useState(\"8.8.8.8\");\n  const [search, setSearch] = useState(\"\"); \n  \n  useEffect(() => {\n    getIp();\n    \n  }, [query]);\n  const getIp= async () => {\n    const response = await fetch(`https://ipapi.co/${query}/json/`)\n    .then(function(response) {\n      response.json().then(jsonData => {\n        console.log(jsonData);\n        setIp(jsonData);\n\n        console.log(Array.isArray(jsonData));\n      });\n      \n     \n    })\n    .catch(function(error) {\n      console.log(error)\n    });\n  }\n  \n  const updateSearch = (e) =>{\n     setSearch(e.target.value); \n  };\n\n  const getSearch = (e) => {\n    e.preventDefault(); \n    setQuery(search); \n    setSearch('');\n  };\n\n  return(\n    <div className=\"container\">\n       <form onSubmit={getSearch} className=\"search-form\" >\n         <input className = \" search-bar\" \n         type= \"text\" \n         value = {search} \n         onChange = {updateSearch} \n         />\n         <button className =\"search-button\" type = \"submit\" > Search </button>\n\n       </form>\n   \n   <div> {ip.ip} </div> \n   <div> {ip.version} </div>\n   <div>  {ip.city} </div>\n   <div> {ip.asn}</div>\n   <div> {ip.continent_code} </div>\n   <div> {ip.country} </div>\n   <div> {ip.country_area}</div>\n   <div> {ip.country_calling_code}</div>\n   <div> {ip.country_capital}</div>\n   <div> {ip.country_code_iso3}</div>\n   <div> {ip.country_name}</div>\n\n   <div> {ip.country_population}</div>\n   <div> {ip.currency}</div>\n   <div> {ip.currency_name}</div>\n   <div> {ip.languages}</div>\n   <div> {ip.region}</div>\n   <div> {ip.region_code}</div>\n   <div> {ip.timezone}</div>\n   <div> {ip.utc_offset}</div>\n\n\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}